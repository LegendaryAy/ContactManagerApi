// <auto-generated />
using System;
using ContactManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactManager.Migrations
{
    [DbContext(typeof(ContactDbContext))]
    [Migration("20210526025757_seedUsers")]
    partial class seedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("ContactManager.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "fadeniayobami@gmail.com",
                            FirstName = "Ayobami",
                            LastName = "Fadeni",
                            PhoneNumber = "+2348106322363"
                        },
                        new
                        {
                            Id = 2,
                            Email = "afolabiahmed@gmail.com",
                            FirstName = "Afolabi",
                            LastName = "Ahmed",
                            PhoneNumber = "+2348135372863"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ibrahimtope@gmail.com",
                            FirstName = "Ibrahim",
                            LastName = "Tope",
                            PhoneNumber = "+2348165289045"
                        },
                        new
                        {
                            Id = 4,
                            Email = "eugeneuche@gmail.com",
                            FirstName = "Eugene",
                            LastName = "Uche",
                            PhoneNumber = "+2348109873426"
                        },
                        new
                        {
                            Id = 5,
                            Email = "victorumeh@gmail.com",
                            FirstName = "Victor",
                            LastName = "Umeh",
                            PhoneNumber = "+2348035871098"
                        },
                        new
                        {
                            Id = 6,
                            Email = "olumidejoda@gmail.com",
                            FirstName = "Olumide",
                            LastName = "Joda",
                            PhoneNumber = "+2348062341790"
                        });
                });

            modelBuilder.Entity("ContactManager.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4623c0c7-d2b2-4e4a-a65f-299329fe4c51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3324c40-4363-4c9b-822d-03c21769ed0e",
                            Email = "fadeniayobami@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayobami",
                            LastName = "Fadeni",
                            LockoutEnabled = false,
                            NormalizedEmail = "FADENIAYOBAMI@GMAIL.COM",
                            NormalizedUserName = "FADENIAYOBAMI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNuASUdXozD6Xu6xuCvgYrXSFLv/xG9lBw8+/uxIYHJAqJ6A7JhMW8RsQQHbLQKMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f6ea153-4b06-4fb0-8be4-6307f535b28f",
                            TwoFactorEnabled = false,
                            UserName = "fadeniayobami@gmail.com"
                        },
                        new
                        {
                            Id = "a18935e1-95d7-4165-953d-69602f6c68dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a4adc03-e071-475d-a7ad-f2610fcd47cc",
                            Email = "fabian12@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Fabian",
                            LastName = "Emmanuel",
                            LockoutEnabled = false,
                            NormalizedEmail = "FABIAN12@GMAIL.COM",
                            NormalizedUserName = "FABIAN12@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCr2fgwheiISnOvMuBpdqKv2WgKerXmb0Qm/jZh+DJKLFEEwRI5WUC51uzBLBeYIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b584cf67-4bd9-4892-8b06-aeacc20f9d00",
                            TwoFactorEnabled = false,
                            UserName = "fabian12@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8729a0ba-809d-4744-b289-4890a7b48065",
                            ConcurrencyStamp = "61f384af-0f57-45f4-8762-8087ef28c5e2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b1531e19-eeb1-4e65-bfe4-037ca8f10a3b",
                            ConcurrencyStamp = "c734df57-2c80-4679-ab97-30c66e3a174f",
                            Name = "Regular User",
                            NormalizedName = "REGULAR USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "4623c0c7-d2b2-4e4a-a65f-299329fe4c51",
                            RoleId = "8729a0ba-809d-4744-b289-4890a7b48065"
                        },
                        new
                        {
                            UserId = "a18935e1-95d7-4165-953d-69602f6c68dd",
                            RoleId = "b1531e19-eeb1-4e65-bfe4-037ca8f10a3b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ContactManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ContactManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ContactManager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
